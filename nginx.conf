##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	server_name 54.157.226.39;

	# location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		# try_files $uri $uri/ =404;
	# }

	## begin - index
	# for subfolders, simply adjust:
	# `location /subfolder {`
	# and the rewrite to use `/subfolder/index.php`
	location / {
		try_files $uri $uri/ /index.php?_url=$uri&$query_string =404;
	}
	## end - index

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
	#	fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	#}

	## begin - security
	# deny all direct access for these folders
	location ~* /(\.git|cache|bin|logs|backup|tests)/.*$ { return 403; }
	# deny running scripts inside core system folders
	location ~* /(system|vendor)/.*\.(txt|xml|md|html|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }
	# deny running scripts inside user folder
	location ~* /user/.*\.(txt|md|yaml|yml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }
	# deny access to specific files in the root folder
	location ~ /(license\.txt|composer\.lock|composer\.json|nginx\.conf|web\.config|htaccess\.txt|\.htaccess) { return 403; }
	## end - security

	## begin - php
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		# choose either a socket or tcp/ip address
		fastcgi_pass unix:/run/php/php7.0-fpm.sock;
		# fastcgi_pass 127.0.0.1:9000;
	}
	## end - php

	location /starterkit/assets {
		if (!-e $request_filename) {
			rewrite ^/(.+)\.(\d+)\.(js|css)$ /$1.$3 break;
		}
	}

	# block content
	location ~ ^/starterkit/content/(.*).(txt|md|mdown)$ {
		rewrite ^/content/(.*)\.(txt|md|mdown)$ /index.php break;
	}

	# block all files in the site folder from being accessed directly
	location ~ ^/starterkit/site/(.*)$ {
		rewrite ^/site/(.*) /index.php break;
	}

	# block all files in the kirby folder
	location ~ ^/starterkit/kirby/(.*)$ {
		rewrite ^/kirby/(.*)$ /error redirect;
	}

	# site links
	location /starterkit/ {
		try_files $uri $uri/ /index.php?$uri&$args;
	}

	location /starterkit/panel {
		try_files $uri $uri/ /starterkit/panel/index.php?$uri&$args;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
		deny all;
	}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
